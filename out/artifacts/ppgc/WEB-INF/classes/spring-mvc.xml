<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-5.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-5.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-5.0.xsd">

    <description>Spring MVC 的配置</description>

    <!-- 1.配置映射器与适配器 -->
    <mvc:annotation-driven/>

    <!-- 2.视图解析器 -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <!--这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址-->
        <!--<property name="contentType" value="text/html"/>-->
        <!--<property name="prefix" value="/WEB-INF/page/"/>-->
        <!-- 前缀和后缀 -->
        <property name="prefix" value="/"/>
        <property name="suffix" value=".html"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->
    </bean>

    <!-- 3.扫描特定路径下带@Controller注解的函数。详解：use-default-filters默认为ture，表示会扫描指定包下的全部的标有@Component的类（即注解为@Controller，@Service，@Repository）并注册为Bean。
    use-default-filters设置为false时，表示不再按照scan指定的包扫描，而是按照<context:include-filter>指定的包扫描
     无论哪种情况<context:include-filter>和<context:exclude-filter>都不能同时存在 -->
    <context:component-scan base-package="com.springmvc.controller">
        <!-- 罗列出扫描项 -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>
    </context:component-scan>

    <!-- 4.静态资源映射 -->
    <!--<mvc:resources mapping="/plugs/**" location="/plugs/"/>-->
    <!--<mvc:resources mapping="/image/**" location="/image/"/>-->
    <!--<mvc:resources mapping="/javascript/**" location="/javascript/"/>-->
    <!--<mvc:resources mapping="/ybsy/**" location="/ybsy/"/>-->

    <!-- 5.定义拦截器 -->
    <mvc:interceptors>
        <!-- 直接定义拦截所有请求 -->
        <bean class="com.springmvc.controller.AuthorityInterceptor"/>
    </mvc:interceptors>

    <!-- 6.配置springMVC处理上传文件的信息 如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8"/>
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000"/>
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <!-- 7.支持返回json(避免IE在ajax请求时，返回json出现下载文件 ) -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>text/json;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!--<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">-->
    <!--<property name="defaultLocale" value="zh_CN"/>-->
    <!--</bean>-->

    <!--<mvc:interceptors>-->
    <!--<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>-->
    <!--</mvc:interceptors>-->

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射， 配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
    <!--<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">-->
    <!--<property name="cacheSeconds" value="0"/>-->
    <!--<property name="messageConverters">-->
    <!--<list>-->
    <!--<ref bean="mappingJacksonHttpMessageConverter"/>&lt;!&ndash; json转换器 &ndash;&gt;-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- Bean解析器,级别高于默认解析器,寻找bean对象进行二次处理 -->
    <!--<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0"/>-->

    <!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
    <!--<mvc:default-servlet-handler/>-->

    <!--https://blog.csdn.net/liuwenhao1996/article/details/75148900-->
    <!--https://www.cnblogs.com/wxisme/p/4924561.html-->
</beans>
