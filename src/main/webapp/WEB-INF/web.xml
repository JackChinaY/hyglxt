<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id="WebApp_ID" version="3.0">

    <display-name>项目配置文件web.xml</display-name>

    <!-- 1.配置字符编码过滤器。在Spring框架中解决从页面传来的字符串的编码问题使用过滤器CharacterEncodingFilter，
     这个过滤器就是针对于每次浏览器请求进行过滤的，然后再其之上添加了父类没有的功能即处理字符编码。https://www.cnblogs.com/wkrbky/p/5929943.html -->
    <filter><!-- 用一个过滤器filter来表示编码过滤器 -->
        <filter-name>encodingFilter</filter-name><!-- 编码过滤器的名字 -->
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class><!-- 定义filter的类的名称 -->
        <!-- encoding用来设置编码格式 -->
        <init-param>
            <param-name>encoding</param-name><!--参数名称-->
            <param-value>UTF-8</param-value><!--参数值-->
        </init-param>
        <!--forceEncoding用来设置是否理会 request.getCharacterEncoding()方法，设置为true则强制覆盖之前的编码格式-->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!-- 编码过滤器过滤规则 -->
    <filter-mapping>
        <filter-name>encodingFilter</filter-name><!-- 对应上面的编码过滤器的名字encodingFilter -->
        <url-pattern>/*</url-pattern><!--指定filter所对应的URL-->
    </filter-mapping>

    <!-- 2.在web.xml配置监听器ContextLoaderListener。ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。
    因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。
    在ContextLoaderListener中关联了ContextLoader这个类，所以整个加载配置过程由ContextLoader来完成。-->
    <listener>
        <description>配置Spring上下文监听器</description>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class><!--用来设定Listener接口-->
    </listener>

    <!-- 3.部署applicationContext的xml文件。applicationContext.xml配置文件中并没有BeanFactory，要想在业务层中的class 文件中直接引用Spring容器管理的bean可通过以下方式 -->
    <context-param>
        <description>配置Spring配置文件路径</description>
        <param-name>contextConfigLocation</param-name><!--参数名称-->
        <!-- 如果是监听多个文件，可用‘，’隔开 -->
        <param-value>classpath:spring-context.xml</param-value><!--参数取值-->
    </context-param>

    <!-- 4.激活Tomcat的defaultServlet来处理静态文件，让DispatcherServlet拦截器不拦截所有的静态文件 ，该段配置要写在DispatcherServlet的前面，让defaultServlet先拦截请求，这样请求就不会进入Spring了-->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.ico</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.gif</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.woff</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.xml</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.map</url-pattern>
    </servlet-mapping>

    <!-- 5.Spring MVC 核心控制器 DispatcherServlet 配置开始 -->
    <servlet><!--用来声明一个servlet的数据 -->
        <!--配置前端控制器-->
        <servlet-name>SpringMVC</servlet-name><!--指定servlet的名称-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><!--指定servlet的类名称,这里配置了前端控制器-->
        <!-- 可以通过contextConfigLocation来自定义SpringMVC配置文件的位置，如不指定，则默认在WEB-INF目录下，名称为[<servlet-name>]-servlet.xml，
             此时文件名必须为[<servlet-name>]-servlet.xml，否则会出错-->
        <!--以下init-param是自定义SpringMVC的配置文件的位置 -->
        <init-param>
            <param-name>contextConfigLocation</param-name><!--参数名称-->
            <param-value>classpath:spring-mvc.xml</param-value><!--参数值-->
        </init-param>
        <load-on-startup>1</load-on-startup><!--当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet.-->
        <async-supported>true</async-supported><!--设置是否启用异步支持-->
    </servlet>
    <!-- 拦截规则设置 -->
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <!-- 此处可以配置成*.do  /  ，对应struts的后缀习惯 -->
        <url-pattern>/</url-pattern><!--以/作为url的话就会拦截所有的请求，包括静态页面的请求-->
        <!--<url-pattern>*.do</url-pattern>&lt;!&ndash;只会拦截*.do的请求&ndash;&gt;-->
    </servlet-mapping>


    <!-- 防止Spring内存溢出监听器  -->
    <!--<listener>-->
    <!--<description>Introspector缓存清除监听器</description>-->
    <!--<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>-->
    <!--</listener>-->

    <!--<listener>-->
    <!--<description>request监听器</description>-->
    <!--<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>-->
    <!--</listener>-->

    <!--log4j配置文件加载-->
    <!--<context-param>-->
    <!--<param-name>log4jConfigLocation</param-name>-->
    <!--<param-value>classpath:log4j.properties</param-value>-->
    <!--</context-param>-->
    <!--启动一个watchdog线程每1800秒扫描一下log4j配置文件的变化-->
    <!--<context-param>-->
    <!--<param-name>log4jRefreshInterval</param-name>-->
    <!--<param-value>1800000</param-value>-->
    <!--</context-param>-->
    <!--spring log4j监听器-->
    <!--<listener>-->
    <!--<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>-->
    <!--</listener>-->


    <!--<servlet-mapping>-->
    <!--<servlet-name>SpringMVC</servlet-name>-->
    <!--<url-pattern>/login</url-pattern>-->
    <!--</servlet-mapping>-->
    <!-- Spring MVC 核心控制器 DispatcherServlet 配置结束 -->


    <!-- 会话超时配置，单位分钟 -->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>

    <!--禁止用户访问一些目录或目录中的文件-->
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Forbidden</web-resource-name>
            <url-pattern>/file/*</url-pattern>
            <!--<url-pattern>index.html</url-pattern>-->
        </web-resource-collection>
        <auth-constraint/>
    </security-constraint>

    <!-- 欢迎页面配置  -->
    <welcome-file-list>
        <welcome-file>login.html</welcome-file>
    </welcome-file-list>

    <!--当系统发生500、404等错误时的页面-->
    <error-page>
        <error-code>500</error-code>
        <location>/</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.NullPointerException</exception-type>
        <location>/</location>
    </error-page>
</web-app>